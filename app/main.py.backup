# app/main.py
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from pathlib import Path
from contextlib import asynccontextmanager
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Importa routers
from app.routes.web import router as web_router
from app.routes.tools import router as tools_router
from app.routes.reports import router as reports_router
from app.routes.comments import router as comments_router

# Importa configuración de base de datos
from app.database import init_db
from app.models import Domain, Report, Comment  # Importar modelos para que SQLAlchemy los registre


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Manejador del ciclo de vida de la aplicación.
    Se ejecuta al inicio y al cierre.
    """
    # Startup: Inicializar base de datos
    logger.info("Inicializando base de datos...")
    try:
        init_db()
        logger.info("Base de datos inicializada correctamente")
    except Exception as e:
        logger.error(f"Error al inicializar base de datos: {str(e)}")
        raise

    yield

    # Shutdown: Limpiar recursos si es necesario
    logger.info("Cerrando aplicación...")


# Crea la app con lifespan
app = FastAPI(
    title="WP Scrap - Domain Analyzer",
    description="API para análisis de dominios con scraping, SEO y métricas técnicas",
    version="1.0.0",
    lifespan=lifespan
)

# Directorio base
BASE_DIR = Path(__file__).resolve().parent.parent

# Archivos estáticos y plantillas
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")

# Registra routers
app.include_router(web_router)
app.include_router(tools_router)
app.include_router(reports_router)
app.include_router(comments_router)  # Nueva ruta de comentarios

# Ruta de salud
@app.get("/health", tags=["health"])
async def health():
    """Endpoint de health check"""
    return {"status": "ok", "message": "Application is running"}


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Manejador del ciclo de vida de la aplicaci n.
    Se ejecuta al inicio y al cierre.
    """
    # Startup: Inicializar base de datos
    logger.info("Inicializando base de datos...")
    try:
        init_db()
        logger.info("Base de datos inicializada correctamente")
    except Exception as e:
        logger.error(f"Error al inicializar base de datos: {str(e)}")
        raise
    
    yield
    
    # Shutdown: Limpiar recursos si es necesario
    logger.info("Cerrando aplicaci n...")


# Crea la app con lifespan
app = FastAPI(
    title="WP Scrap - Domain Analyzer",
    description="API para análisis de dominios con scraping, SEO y métricas técnicas",
    version="1.0.0",
    lifespan=lifespan
)

# Directorio base
BASE_DIR = Path(__file__).resolve().parent.parent

# Archivos est ticos y plantillas
app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")

# Registra routers
app.include_router(web_router)
app.include_router(tools_router)
app.include_router(reports_router)

# Ruta de salud
@app.get("/health", tags=["health"])
async def health():
    """Endpoint de health check"""
    return {"status": "ok", "message": "Application is running"}